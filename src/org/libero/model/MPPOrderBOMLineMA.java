package org.libero.model;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.List;
import java.util.Properties;

import org.compiere.model.MStorageOnHand;
import org.compiere.model.MTable;
import org.compiere.model.Query;
import org.compiere.util.DB;
import org.compiere.util.Env;

public class MPPOrderBOMLineMA extends X_PP_Order_BOMLineMA
{
	private static final long serialVersionUID = 1L;

	public MPPOrderBOMLineMA(Properties ctx, int PP_Order_BOMLineMA_ID, String trxName)
	{
		super(ctx, PP_Order_BOMLineMA_ID, trxName);
	}

	public MPPOrderBOMLineMA(Properties ctx, ResultSet rs, String trxName)
	{
		super(ctx, rs, trxName);
	}

	/**
	 * Parent Constructor
	 * 
	 * @param parent parent
	 * @param M_AttributeSetInstance_ID asi
	 * @param MovementQty qty
	 * @param DateMaterialPolicy
	 */
	public MPPOrderBOMLineMA(MPPOrderBOMLine parent, int M_AttributeSetInstance_ID, BigDecimal MovementQty,
			Timestamp DateMaterialPolicy)
	{
		this(parent, M_AttributeSetInstance_ID, MovementQty, DateMaterialPolicy, true);
	}

	/**
	 * @param parent
	 * @param M_AttributeSetInstance_ID
	 * @param MovementQty
	 * @param DateMaterialPolicy
	 * @param isAutoGenerated
	 */
	public MPPOrderBOMLineMA(MPPOrderBOMLine parent, int M_AttributeSetInstance_ID, BigDecimal MovementQty,
			Timestamp DateMaterialPolicy, boolean isAutoGenerated)
	{
		this(parent.getCtx(), 0, parent.get_TrxName());
		setClientOrg(parent);
		setPP_Order_BOMLine_ID(parent.getPP_Order_BOMLine_ID());
		//
		setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);
		setMovementQty(MovementQty);
		if (DateMaterialPolicy == null)
		{
			if (M_AttributeSetInstance_ID > 0)
			{
				DateMaterialPolicy = MStorageOnHand.getDateMaterialPolicy(parent.getM_Product_ID(),
						M_AttributeSetInstance_ID, parent.get_TrxName());
			}
			if (DateMaterialPolicy == null)
			{
				DateMaterialPolicy = parent.getParent().getDatePromised();
			}
		}
		setDateMaterialPolicy(DateMaterialPolicy);
		setIsAutoGenerated(isAutoGenerated);
	}

	public static MPPOrderBOMLineMA addOrCreate(MPPOrderBOMLine line, int M_AttributeSetInstance_ID,
			BigDecimal MovementQty, Timestamp DateMaterialPolicy, boolean isAutoGenerated)
	{
		Query query = new Query(Env.getCtx(), MPPOrderBOMLineMA.Table_Name,
				"PP_Order_BOMLine_ID=? AND M_AttributeSetInstance_ID=?", line.get_TrxName());
		MPPOrderBOMLineMA po = query.setParameters(line.get_ID(), M_AttributeSetInstance_ID).first();
		if (po == null)
			po = new MPPOrderBOMLineMA(line, M_AttributeSetInstance_ID, MovementQty, DateMaterialPolicy,
					isAutoGenerated);
		else
			po.setMovementQty(po.getMovementQty().add(MovementQty));
		return po;
	}

	/**
	 * Get Material Allocations for order bom line
	 * 
	 * @param ctx context
	 * @param M_InOutLine_ID line
	 * @param trxName trx
	 * @return allocations
	 */
	public static MPPOrderBOMLineMA[] get(Properties ctx, int PP_Order_BOMLine_ID, String trxName)
	{
		Query query = MTable.get(ctx, MPPOrderBOMLineMA.Table_Name)
				.createQuery(MPPOrderBOMLineMA.COLUMNNAME_PP_Order_BOMLine_ID + "=?", trxName);
		query.setParameters(PP_Order_BOMLine_ID);
		query.setOrderBy(MPPOrderBOMLineMA.COLUMNNAME_Created);
		List<MPPOrderBOMLineMA> list = query.list();
		MPPOrderBOMLineMA[] retValue = new MPPOrderBOMLineMA[list.size()];

		int i = 0;
		for (MPPOrderBOMLineMA orderBOMLineMA : list)
		{
			retValue[i++] = orderBOMLineMA;
		}

		// list.toArray(retValue);
		return retValue;
	} // get
	
	
	/**
	 * Get Total Movement Qty for order bom line
	 * 
	 * @param ctx context
	 * @param M_InOutLine_ID line
	 * @param trxName trx
	 * @return allocations
	 */
	public static BigDecimal getTotalMovementQty(Properties ctx, int PP_Order_BOMLine_ID, String trxName)
	{
		String sql = "SELECT SUM(MovementQty) FROM PP_Order_BOMLineMA WHERE PP_Order_BOMLine_ID = ?";
		return DB.getSQLValueBD(trxName, sql, PP_Order_BOMLine_ID);
	} // getTotalMovementQty
	

}
